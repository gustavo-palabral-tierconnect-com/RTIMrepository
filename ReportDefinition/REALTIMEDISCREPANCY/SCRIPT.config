function (options) {

    //**************************************************************************************
    // Table script initialization
    //**************************************************************************************
  
    var table = {};
    table.options = JSON.stringify(options); //Options from vizix filters
    table.data = [];
    table.title = "Real Time Discrepancy";
    table.columnNames = [];    
  
    /***************************** COLUMN NAMES FOR RESULT ************************/
  
    function getDiscrepancyDefaultColumns() {
      var columns = [       
        "RTI Code",
        "RTI Type",
        "RTI Owner",
        "Size",
        "Color",
        "Remaining",
        "Expected",
        "Counted",
        "Counted Production",
        "Counted Marketplace",       
        "Facility"
      ];
      return columns;
    }
  
    //******************************* Set Start, End Time from store thing *****************************************
  
    function setCycleCountTime(timeObject, configurationThing, configurationThingUdf) {
        function setRange(timeValue, timeObject){
            
            var arrayTime = timeValue.split(":");
            if (arrayTime.length == 3) {
                timeObject.hour = parseInt(arrayTime[0]);
                timeObject.minute = parseInt(arrayTime[1]);
                timeObject.second = parseInt(arrayTime[2]);
            }

            return timeObject;
        }        
        
        if(configurationThing !== null){
            //Fill Start Time
            timeObject = setRange(configurationThing[configurationThingUdf].value, timeObject);           
        }       

        return timeObject;
    }

    function getExcludeSKUs(configurationThing) {           
        var excludeSKUs = [];
        if(configurationThing !== null){
            //Fill excludeSKUs           
            if(configurationThing.Retail_Config_SKUsOutOfScope !== null && configurationThing.Retail_Config_SKUsOutOfScope.value !== null){
                excludeSKUs = configurationThing.Retail_Config_SKUsOutOfScope.value.split(",");
            }        
        }
        return excludeSKUs;       
    }

    function getExcludeOnClearance(configurationThing) {           
        var excludeOnClearance = false;
        if(configurationThing !== null){
            //Fill onClearance
            if(configurationThing.Retail_Config_ExcludeClearance !== null && configurationThing.Retail_Config_ExcludeClearance.value !== null && configurationThing.Retail_Config_ExcludeClearance.value === "Yes"){
                excludeOnClearance = true;
            }   
        }  
        return excludeOnClearance;     
    }

    //******************************* get configuration values from store thing *****************************************
  
    function getConfiguration(thingTypeCode, store){
        var configurationThing = db.things.findOne({"thingTypeCode": thingTypeCode, "serialNumber": store }, {
            Retail_Config_CycleCountStartTime: 1,
            Retail_Config_CycleCountEndTime: 1,
            Retail_Config_SKUsOutOfScope: 1,
            Retail_Config_ExcludeClearance: 1
        });

        return configurationThing;
    }
  
    function generateObjectMapping(){

        var objectMapping = {};
        objectMapping.SellFloorQuantity = "Retail_QTY_SF";
        objectMapping.BackRoomQuantity = "Retail_QTY_SR";
        objectMapping.StockOnHandQuantity = "Retail_QTY";
        objectMapping.StockOnHandDate = "Retail_Date";
        
        objectMapping.UPCs = "Retail_Product_UPCs";
        objectMapping.UPC = "Retail_Product_UPC";
        objectMapping.SKU = "Retail_Product_SKU";    
        objectMapping.ProductName = "Retail_Product_Name";

        //objectMapping.Department = "Retail_Product_Level1Name";            
        objectMapping.Brand = "Retail_Product_Level2Name";

        objectMapping.Size = "Retail_Product_Size";
        objectMapping.Color = "Retail_Product_Color";
        objectMapping.Category = "Retail_Product_Level3Name";
        objectMapping.Price = "Retail_Product_Price";
        //************************************/
        objectMapping.Level = "Retail_Product_Level1";        
        objectMapping.LevelName = "Retail_Product_Level1Name";

        objectMapping.dynamicGroup = "Retail_Product_Level1Name";
         //************************************/

        objectMapping.StoreNumber = "Retail_SOHStoreNumber";        
        objectMapping.Clearance = "Retail_SOHClearance";
        
        objectMapping.CycleCountDate = "Retail_CycleCountDate";        
        objectMapping.EPCGS1KEY = "Retail_GS1Key";
        
        return objectMapping;
        
    }

    
    //**************************************************************************************
    // Merge function to get result
    //*************************************************************************************
    function Merge(onHandSKUS) {
      
      var result = [];
      for (var sku in onHandSKUS) {
        var row = [   sku,
            onHandSKUS[sku][dynamicGroupProperty.label],
            onHandSKUS[sku].brand, 
            onHandSKUS[sku].size,
            onHandSKUS[sku].color,
            onHandSKUS[sku].diff,                       
            onHandSKUS[sku].ONHAND,
            onHandSKUS[sku].qtyOnHand, 
            onHandSKUS[sku].qtySF, 
            onHandSKUS[sku].qtySR,           
            storeID];

            result.push(row);           
      }

      return result;
    }

    function filterResultDiff(preResult) {
      
        var result = {};

        if(diffFrom && diffTo && diffFrom.length && diffTo.length){            
            for (var sku in preResult) {
                var row = preResult[sku];

                if(row.diff >= parseInt(diffFrom) && row.diff <= parseInt(diffTo)){
                    result[sku] = row;
                }                
            }
            return result;
        }
        
        return preResult;       
    }

    function filterResultSOHQty(preResult) {
      
        var result = {};

        if(sohQtyFrom && sohQtyTo && sohQtyFrom.length && sohQtyTo.length){            
            for (var sku in preResult) {
                var row = preResult[sku];

                if(row.ONHAND >= parseInt(sohQtyFrom) && row.ONHAND <= parseInt(sohQtyTo)){
                    result[sku] = row;
                }                
            }
            return result;
        }
        
        return preResult;  
    }

    function filterResultQty(preResult) {
      
        var result = {};

        if(qtyFrom && qtyTo && qtyFrom.length && qtyTo.length){            
            for (var sku in preResult) {
                var row = preResult[sku];

                if(row.qtyOnHand >= parseInt(qtyFrom) && row.qtyOnHand <= parseInt(qtyTo)){
                    result[sku] = row;
                }                
            }
            return result;
        }
        
        return preResult;  
    }
        
    function filterResultDiscrepancy(preResult) {
      
        var result = {};

        if(discrepancy && discrepancy.length){            
            for (var sku in preResult) {
                var row = preResult[sku];

                if(row.discrepancy && row.discrepancy === discrepancy){
                    result[sku] = row;
                }                
            }
            return result;
        }
        
        return preResult;  ;
    }
  
  
    function sortByDescending(index, result){
        return result.sort(function (a, b) {
            if (a[index] < b[index]) return 1;
            if (a[index] > b[index]) return -1;
            return 0;
        });
        
    }

    function sortByAscending(index, result){
        return result.sort(function (a, b) {
            if (a[index] > b[index]) return 1;
            if (a[index] < b[index]) return -1;
            return 0;
        });        
    }
    //**************************************************************************************
    // Get SOH Functions
    //**************************************************************************************

    function getQueryMatchSOH(){

        var queryMatchSOH = {};        
        queryMatchSOH.thingTypeCode = thingTypeCodeSOH;        
         queryMatchSOH.groupCode = groupCode;        
        
        queryMatchSOH[objectMapping.UPCs + ".value"] = {$exists: true, $ne: null};
        queryMatchSOH[objectMapping.SKU + ".value"] = {$exists: true, $ne: null, $nin: excludeSKUs};
        queryMatchSOH[dynamicGroup] = {$exists: true, $ne: null};       
        queryMatchSOH[objectMapping.StoreNumber + ".value"] = storeID;        

        queryMatchSOH[objectMapping.StockOnHandDate + ".value"] = {$gte: start.getTime(), $lt: end.getTime()};

        if (excludeOnClearance) {
            queryMatchSOH[objectMapping.Clearance + ".value"] = false;
        }           
        
        queryMatchSOH[objectMapping.StockOnHandQuantity + ".value"] = {$exists: true, $ne: null};
    
        // ALL departments
        if (department !== "") {
            queryMatchSOH[dynamicGroup] = department;
        }

        // ALL Brand
        if (brand !== "") {
            queryMatchSOH[objectMapping.Brand + ".value"] = brand;
        }

        // ALL Brand
        if (sku !== "") {
            queryMatchSOH[objectMapping.SKU + ".value"] = sku;
        }

        return queryMatchSOH;
    }

    function getQueryProjectSOH(){

        var queryProjectSOH = {};
        
        queryProjectSOH[objectMapping.StockOnHandDate] = 1;
        queryProjectSOH[objectMapping.StoreNumber] = 1;

        queryProjectSOH[objectMapping.UPCs] = 1;
        queryProjectSOH[objectMapping.SKU] = 1;
        //queryProjectItem[objectMapping.SKUDesc + ".value"] = 1;
        queryProjectSOH[objectMapping.ProductName] = 1;
        queryProjectSOH[objectMapping.Brand] = 1;
        //queryProjectSOH[objectMapping.Department] = 1;     
        queryProjectSOH[objectMapping.Size] = 1;     
        queryProjectSOH[objectMapping.Color] = 1;     
        queryProjectSOH[objectMapping.Category] = 1;
        queryProjectSOH[objectMapping.Price] = 1;
   
        
        queryProjectSOH[objectMapping.StockOnHandQuantity] = 1; 
        
        queryProjectSOH[dynamicGroup] = 1;

        return queryProjectSOH;
    }

    function getQueryGroupSOH(){

        var queryGroupSOH = {};
        queryGroupSOH._id = {};
        queryGroupSOH._id.sku = "$" + objectMapping.SKU + ".value";
        queryGroupSOH._id.store = "$" + objectMapping.StoreNumber + ".value";

        queryGroupSOH.skuDescription = {$first: "$" + objectMapping.ProductName + ".value"};
        queryGroupSOH.size = {$first: "$" + objectMapping.Size + ".value"};
        queryGroupSOH.color = {$first: "$" + objectMapping.Color + ".value"};
        queryGroupSOH.brand = {$first: "$" + objectMapping.Brand + ".value"};
        queryGroupSOH.category = {$first: "$" + objectMapping.Category + ".value"};
        queryGroupSOH.price = {$first: "$" + objectMapping.Price + ".value"};
        
        //queryGroupSOH.department = {$first: "$" + objectMapping.Department + ".value"};

        queryGroupSOH.quantity = {$sum: 1};
        queryGroupSOH.upcs =  {$addToSet: "$" + objectMapping.UPCs + ".value"};       
       
        queryGroupSOH.sohQty = {$first: "$" + objectMapping.StockOnHandQuantity + ".value"};

        // Dynamic Group
        queryGroupSOH._id[dynamicGroupProperty.label] = "$" + dynamicGroup;

        return queryGroupSOH;
    }

    //*************************************************************************************
    // Cycle Count Functions
    //*************************************************************************************
    
    function getQueryMatchCycleCount(){

        var queryMatchCycleCount = {};
        queryMatchCycleCount.thingTypeCode = thingTypeCodeItem;
         queryMatchCycleCount.groupCode = groupCode;
        queryMatchCycleCount["zone.value.facilityMap"] = storeID;        
     
        queryMatchCycleCount[ objectMapping.CycleCountDate + ".value"] = {
            $gte: cycleCountStartTime.getTime(),
            $lt: cycleCountEndTime.getTime()
        };
        queryMatchCycleCount[objectMapping.UPC + ".value"] = {$exists: true, $ne: null};
        queryMatchCycleCount[objectMapping.SKU + ".value"] = {$exists: true, $ne: null, $in: skus};
        queryMatchCycleCount["zone.value.zoneType"] = {$in: ["SALESFLOOR", "STOCKROOM"]};

        // ALL departments
        if (department !== "") {
            queryMatchCycleCount[dynamicGroup] = department;
        }

        // ALL Brand
        if (brand !== "") {
            queryMatchSOH[objectMapping.Brand + ".value"] = brand;
        }

        // ALL Brand
        if (sku !== "") {
            queryMatchSOH[objectMapping.SKU + ".value"] = sku;
        }
        
        return queryMatchCycleCount;
    }

    function getQueryProjectCycleCount(){
        var queryProjectCycleCount = {};
        queryProjectCycleCount.serialNumber = 1;
        queryProjectCycleCount[objectMapping.CycleCountDate + ".value"] = 1;
        queryProjectCycleCount[objectMapping.SKU  + ".value"]  = 1;
        queryProjectCycleCount[ "salesFloor" ] =
                                                    {
                                                            $switch:
                                                                {
                                                                    branches: [
                                                                        {
                                                                            case: { $eq: ["$zone.value.zoneType", "SALESFLOOR"] },
                                                                            then: 1
                                                                        },
                                                                        {
                                                                            case: { $ne: ["$zone.value.zoneType", "SALESFLOOR"] },
                                                                            then: 0
                                                                        }
                                                                    ],
                                                                    default: -1
                                                                }
                                                        };
            queryProjectCycleCount["stockRoom"] = {
                                                    $switch:
                                                        {
                                                            branches: [
                                                                {
                                                                    case: { $eq: ["$zone.value.zoneType", "STOCKROOM"] },
                                                                    then: 1
                                                                },
                                                                {
                                                                    case: { $ne: ["$zone.value.zoneType", "STOCKROOM"] },
                                                                    then: 0
                                                                }
                                                            ],
                                                            default: -1
                                                        }
                                                };

        return queryProjectCycleCount;
    }

    function getQueryGroupCycleCount(){

        var queryGroupCycleCount = {};
        queryGroupCycleCount._id = {};
        queryGroupCycleCount._id.sku = "$" + objectMapping.SKU + ".value" ;
        queryGroupCycleCount.epcs =  { $push: "$serialNumber" } ;
        queryGroupCycleCount.quantity = { $sum: 1 };

        queryGroupCycleCount.salesFloor = { $sum: "$salesFloor" };
        queryGroupCycleCount.stockRoom = { $sum: "$stockRoom" };

        return queryGroupCycleCount;
    }     
 
    //****************************** Get Object Mapping ************************************
  
    var objectMapping = generateObjectMapping();

    //****************************** Dynamic Group ************************************
  
    var dynamicGroupProperty = {};
    dynamicGroupProperty.id = objectMapping.Level;     
    dynamicGroupProperty.name = objectMapping.LevelName;
    dynamicGroupProperty.label = "Department";
       
    //**************************************************************************************
    // Variables
    //**************************************************************************************
    
    var thingTypeCodeItem = "ITEM";
    var thingTypeCodeSOH = "SOH";
    var groupCode = "RTIM";
    
    var thingTypeStoreConfiguration = "STORE";

    //******************************* Default Filters *****************************************
  
     var department = (options.filters && options.filters['RTI Type']) ? options.filters['RTI Type'] : "";
     var storeID = (options.filters && options.filters.Facility) ? options.filters.Facility : "";
     var brand = (options.filters && options.filters['RTI Owner']) ? options.filters['RTI Owner'] : "";
     
     var sortBy = (options.filters && options.filters.SortBy) ? options.filters.SortBy : "";
     var sortOrder = (options.filters && options.filters.SortOrder) ? options.filters.SortOrder : "";
     var discrepancy = (options.filters && options.filters.Discrepancy) ? options.filters.Discrepancy : "";

     var sku = (options.filters && options.filters['RTI Code']) ? options.filters['RTI Code'] : "";

     
     var diffFrom = (options.filters && options.filters["ExpectedFrom"]) ? options.filters["ExpectedFrom"] : "";
     var diffTo = (options.filters && options.filters["ExpectedTo"]) ? options.filters["ExpectedTo"] : "";

     var sohQtyFrom = (options.filters && options.filters["RemainingFrom"]) ? options.filters["RemainingFrom"] :"";
     var sohQtyTo = (options.filters && options.filters["RemainingTo"]) ? options.filters["RemainingTo"] : "";
    
     var qtyFrom = (options.filters && options.filters["CountedFrom"]) ? options.filters["CountedFrom"] : "";
     var qtyTo = (options.filters && options.filters["CountedTo"]) ? options.filters["CountedTo"] : "";

   
    //********************************** Configuration values ****************************************************
    
    var configurationThing = getConfiguration(thingTypeStoreConfiguration, storeID);

    var excludeSKUs = getExcludeSKUs(configurationThing);
    var excludeOnClearance = getExcludeOnClearance(configurationThing);           
    
    //**************************************************************************************
        
    var dbDate = new Date();
    var currentUserDate = new Date(formatDate(dbDate.getTime()));
    var offset = dbDate.getTime() - currentUserDate.getTime();
    //var offset = currentUserDate.getTime() - dbDate.getTime();

    var start = new Date(currentUserDate);
    //var start = new Date();
    start.setHours(0, 0, 0, 0);
    start.setTime(start.getTime() + offset);
  
    var end = new Date(currentUserDate);
    //var end = new Date();
    end.setHours(23, 59, 59, 999);
    end.setTime(end.getTime() + offset);
      
    var startTime = {hour: 0, minute: 0, second: 0};
    var endTime = {hour: 23, minute: 59, second: 59};

    startTime = setCycleCountTime(startTime, configurationThing, "Retail_Config_CycleCountStartTime");
    endTime = setCycleCountTime(endTime, configurationThing, "Retail_Config_CycleCountEndTime");    

    var cycleCountStartTime = new Date(currentUserDate);
    cycleCountStartTime.setHours(startTime.hour, startTime.minute, startTime.second, 0);
    cycleCountStartTime.setTime(cycleCountStartTime.getTime() + offset);

    var cycleCountEndTime = new Date(currentUserDate);
    cycleCountEndTime.setHours(endTime.hour, endTime.minute, endTime.second, 0);
    cycleCountEndTime.setTime(cycleCountEndTime.getTime() + offset);  
  
    //*****************************************************************************************  
  
    var onHandSKUS = {};

    var discrepancyColumns = getDiscrepancyDefaultColumns(); 
       
    var dynamicGroup = objectMapping.dynamicGroup + ".value";             
        
    //**************************************************************************************
    // Get ONHAND and metadata
    //**************************************************************************************  
  
    var queryMatchSOH = getQueryMatchSOH();
    var queryProjectSOH = getQueryProjectSOH();
    var queryGroupSOH = getQueryGroupSOH();        
   
    var skus = [];
    db.getCollection(thingsCollectionName("/"+groupCode+"/SOH")).aggregate([  
    //db.things.aggregate([
            {$match: queryMatchSOH},
            {$project: queryProjectSOH},
            {$group: queryGroupSOH}
    ]).forEach(function (x) {
    
        onHandSKUS[x._id.sku] = {};
        onHandSKUS[x._id.sku].ONHAND = parseInt(x.sohQty);
        
        onHandSKUS[x._id.sku].upcs = x.upcs.join("|");
        onHandSKUS[x._id.sku].skuDescription = x.skuDescription;
        onHandSKUS[x._id.sku].brand = x.brand;
        //onHandSKUS[x._id.sku].department = x.department;
        onHandSKUS[x._id.sku].size = x.size;
        onHandSKUS[x._id.sku].color = x.color;
        
        onHandSKUS[x._id.sku].category = x.category;
        onHandSKUS[x._id.sku].price = x.price;
        
        onHandSKUS[x._id.sku][dynamicGroupProperty.label] = x._id[dynamicGroupProperty.label]; 
        
        onHandSKUS[x._id.sku].diff = parseInt(x.sohQty)*(-1);
        
        onHandSKUS[x._id.sku].qtyOnHand = 0;
        onHandSKUS[x._id.sku].qtySF = 0;
        onHandSKUS[x._id.sku].qtySR = 0;

        onHandSKUS[x._id.sku].discrepancy = "Yes";
        if(onHandSKUS[x._id.sku].diff === 0 || onHandSKUS[x._id.sku].diff === -0){
            onHandSKUS[x._id.sku].discrepancy = "No";
        }    

        skus.push(x._id.sku);           
    });
  
    //*************************************************************************************
    // Get Cycle Count
    //*************************************************************************************
    
    var queryMatchCycleCount = getQueryMatchCycleCount();
    var queryProjectCycleCount = getQueryProjectCycleCount();    
    var queryGroupCycleCount = getQueryGroupCycleCount();
        
   
    db.getCollection(thingsCollectionName(options.__fqnCode)).aggregate([
    //db.things.aggregate([
            {$match: queryMatchCycleCount},
            {$project: queryProjectCycleCount},          
            {$group: queryGroupCycleCount}
            ],
            {allowDiskUse: true}
    ).forEach(function (x) {
           
            var epcQuantity = x.quantity;
            var qtyOnHand = onHandSKUS[x._id.sku].ONHAND;
            var diff = epcQuantity - qtyOnHand;

            onHandSKUS[x._id.sku].qtySF = x.salesFloor;
            onHandSKUS[x._id.sku].qtySR = x.stockRoom;

            onHandSKUS[x._id.sku].qtyOnHand = epcQuantity;
            onHandSKUS[x._id.sku].diff = diff;
            
            if(diff === 0){
                onHandSKUS[x._id.sku].discrepancy = "No";
            }      
    });


  
    var finalResult = [];
    var skip = 0;
    var limit = 0;
  
    onHandSKUS = filterResultDiff(onHandSKUS);
    onHandSKUS = filterResultDiscrepancy(onHandSKUS);
    onHandSKUS = filterResultQty(onHandSKUS);
    onHandSKUS = filterResultSOHQty(onHandSKUS);

    finalResult = Merge(onHandSKUS);      

    var index = discrepancyColumns.indexOf(sortBy);
    
    if(index >= 0 && sortOrder === "Ascending"){
        finalResult = sortByAscending(index, finalResult);
    }
    if(index >= 0 && sortOrder === "Descending"){
        finalResult = sortByDescending(index, finalResult);
    }

    /***************************** PAGINATION ************************/
    table.totalRows = finalResult.length;
    skip = options.pageNumber > 0 ? options.pageSize * (options.pageNumber - 1) : 0;
    limit = (options.pageSize != -1 && options.pageSize !== 0) ? options.pageSize : table.totalRows;
    /*****************************************************************/
     
    table.data = finalResult.slice(skip, (limit + skip));
    table.columnNames = discrepancyColumns;

    
    table.onHandSKUS = JSON.stringify(onHandSKUS);
    
    table.queryMatchSOH = JSON.stringify(queryMatchSOH);
    table.queryProjectSOH = JSON.stringify(queryProjectSOH);
    table.queryGroupSOH = JSON.stringify(queryGroupSOH);   
    

   
    table.queryMatchCycleCount = JSON.stringify(queryMatchCycleCount);
    table.queryProjectCycleCount = JSON.stringify(queryProjectCycleCount);
    table.queryGroupCycleCount = JSON.stringify(queryGroupCycleCount);

    table.indeex = index;
    table.sortBy = sortBy;
    table.sortOrder = sortOrder;
    table.discrepancy = discrepancy;
    
    return table;
}