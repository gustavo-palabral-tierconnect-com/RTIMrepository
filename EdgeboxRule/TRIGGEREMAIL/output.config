(function (){
        var thing = thingWrapper.getThing(); // Thing from DB
        var thingType = thingWrapper.getThingType().getCode();
        var thingMessage = thingWrapper.getThingMessage();
        var thingTypeCode = thingMessage.getThingTypeCode();
        var messageTimestamp = thingMessage.getTime();
        var source = thingMessage.getUdf("source").getValue();
        var UDFS = {};
        var jsRuleName = '<<<JSRULE>>> ' ;
        var loggerModifier = jsRuleName + thingType + ' | '; // appends the thing type
        var loggerModifierSN = loggerModifier + thing.getSerialNumber() + ' | '; // appends the thing serial

        /** This variable controls the global logging, set to false when in PROD **/
        var gLogState = true ;

        var logHeader = 'Trigger Email manually' ;

        // START log of rule
        printLog("======================================= "+logHeader+"=============================================");


            
            
        var TriggerManually = parseToBoolean(getUDFvalue("TriggerManually"));
        var EnableDaily = parseToBoolean(getUDFvalue("EnableDaily"));
        var EnableWeekly = parseToBoolean(getUDFvalue("EnableWeekly"));
        
        printLog("TriggerManually:: "+TriggerManually);
        printLog("EnableDaily:: "+EnableDaily);
        printLog("EnableWeekly:: "+EnableWeekly);
        
        
        if(TriggerManually && EnableDaily){
            
            ruleActionExecutor.callMqtt("EMAILMQTT");
            
            appendUDF("TriggerManually",false);
            PropertySetter(UDFS);  //This Function is called Once at the end.
            
        }else if(TriggerManually && EnableWeekly){
            
            ruleActionExecutor.callMqtt("EMAILMQTTWEEKLY");
            
            appendUDF("TriggerManually",false);
            PropertySetter(UDFS);  //This Function is called Once at the end.
            
        }
        
                    
                    


        // START OF FUNCTION LIBRARY
        // ********************************************************************************************************
        // ********************************************************************************************************
        // 1. printLog
        // 2. PropertySetter
        // 3. appendUDF
        // 4. parseToBoolean
        // 5. getUDFvalue
        // 6. mapZoneTypePropertiesValues
        // 7. GetZonePropertyValue
        // 8. GetThingByThingTypeCode
        // 9. equalizeUPCto13Chars
        //10. equalizeSKUto8Chars
        //11. copyRetailMetaData
        //12. setFirstDetectTimeBySource
        //13. setLastDetectTimeBySource
        //14. incrementCounterZoneChange
        //15. incrementCounterJS
        //16. incrementCounterTagBlink
        //16a.incrementCounters

        /**
         * printLog Print debug logs
         *
         * Usage example:
         * printLog(logHeader, 'start');
         * printLog(varName);
         * printLog(logHeader, 'end');
         *
         * @param  {string} message Message to display
         * @param  {string} type    Type of message: start, end or update
         * @return none
         */
        function printLog(message, type){

            if (gLogState === false ) return ;  // no need to log if log state is set to false

            switch(type) {
                case "start":
                    logger.warn(loggerModifierSN + ': <<<--- JSRULE Start '+ message +' --->>>');
                    break;
                case "end":
                    logger.warn(loggerModifierSN + ': <<<--- JSRULE End '+ message +' --->>>');
                    break;
                case "debug":
                    logger.warn(loggerModifierSN + ':'  + message);
                    break;
                default:
                    // By default update mode
                    logger.warn(loggerModifierSN + ':'  + message);
            }
        }

        /**
         * PropertySetter given an array of UDFs, this function will update the Thing
         *
         * Usage example:
         * PropertySetter(UDFS);
         *
         * @param {object} myUDFs [array of all UDFs]
         * @return none
         */
        function PropertySetter (myUDFs) {
            for (var udf in myUDFs) {
                var value = myUDFs[udf];
                if ((udf !== null) && (value !== null) && (value !== undefined)) {
                    thingMessage.putField(messageTimestamp, udf, ""+value);
                    printLog(logHeader + ' PropertySetter: ' + udf + ' | Value: ' + myUDFs[udf], "UPDATE");
                }
            }
        }

        /**
         * appendUDF - Append a new udf element to the UDFs object to change
         * (*) UDFS object shoud be defined previously
         *
         * Usage example:
         * appendUDF('MyValue', MyNewValue);
         *
         * @param  {string} udfName  UDFName
         * @param  {string} udfValue
         * @return {}          UDF array modified
         */
        function appendUDF(udfName, udfValue){
            UDFS[udfName] = udfValue;
            printLog(logHeader, "appendUDF= "+ udfName + ':' + udfValue);
        }

        /**
         * parseToBoolean - returns the respective boolean value from a Boolean or String type
         * @param  {string/boolean} value  udf value
         * @return {boolean}  Boolean
         */
        function parseToBoolean(value) {
            return (value === true || value === 'true');
        }


        /**
         * getUDFValue - Gets the value of a UDF
         * Posible Parameters
         * <UDFName> | serialNumber | thingTypeCode | Source | zoneCode | zone | facilityMap | zoneID | zoneTypeCode | zoneType | zoneProperties
         *
         * Function latest update : 2017-09-15 11:00:00
         *
         * Usage example:
         * myZone = getUDFvalue('zone');
         * getUDFvalue('serialNumber');
         *
         * @param  {string} udfName  <UDFName>. Ej thingTypeCode, zoneCode, zone, facilityMap
         * @return {string}          UDF Value
         */
        function getUDFvalue(udfName){
            udfValue = '';

            switch(udfName){
                case 'serialNumber':
                    udfValue = thing.getSerialNumber();
                    break;
                case 'thingTypeCode':
                    udfValue = thing.getThingType().getCode();
                    break;
                case 'Source':
                    thingMessage.getUdf("source").getValue();
                    break;
                case 'zoneCode':
                    zoneObj = thingWrapper.getUdfZone("zone");
                    if(zoneObj != null)
                        udfValue = zoneObj.getCode();
                    break;
                case 'zone':
                    zoneObj = thingWrapper.getUdfZone("zone");
                    if(zoneObj != null)
                        udfValue = zoneObj.getName();
                    break;
                case 'facilityMap':
                    zoneObj = thingWrapper.getUdfZone("zone");
                    if(zoneObj != null)
                        udfValue = zoneObj.getLocalMap().getName();
                    break;
                case 'zoneID':
                    zoneObj = thingWrapper.getUdfZone("zone");
                    if(zoneObj != null){
                        udfValue = zoneObj.getId();
                    }
                    break;
                case 'zoneTypeCode' :
                    var zoneObj = thingWrapper.getUdfZone("zone");
                    if(zoneObj != null){
                        udfValue = zoneObj.getZoneType().getId();
                    }
                    break;
                case 'zoneType' :
                    udfValue = null;
                    var zoneObj = thingWrapper.getUdfZone("zone");
                    if(zoneObj){
                        zoneTypeObj = zoneObj.getZoneType();
                        if (zoneTypeObj) {
                            udfValue = zoneTypeObj.getName();
                        }
                    }
                    break;
                case 'zoneProperties':
                    var zoneObj = thingWrapper.getUdfZone("zone");
                    zoneTypeObj = zoneObj.getZoneType();
                    if (zoneObj) {
                        zoneID = zoneObj.getId();
                        if(zoneID){
                            udfValue = mapZoneTypePropertiesValues(zoneID, zoneTypeObj);
                        }
                    }else{
                        udfValue = null;
                    }

                    break;
                default:
                    udfValue = thingWrapper.getUdf(udfName);

            }

            return udfValue;
        }


        /**
         * mapZoneTypePropertiesValues - Gets the zone properties
         * @param  {string} zoneId
         * @return {string} zoneType
         */

        function mapZoneTypePropertiesValues (zoneId, zoneType) {
            if(!zoneId || !zoneType || !thingWrapper.getZonePropertiesValues) {
                return {};
            }

            // getting the definition of the zone property of zone type
            // this is needed because the zone property values only contains id references
            // to properties defined insdie zone type
            // i.e. [{type: {Number}, name: {String},id: {Number}}, {...}]
            var zonePropertiesDef = zoneType.getZoneProperties();

            // if there is not properties defined in the zone type
            // then it isn't necessary to perform any action 'cause zone proeprties will also be empty
            if (!zonePropertiesDef || !zonePropertiesDef.length) {
                return {};
            }

            // getting zone property values based on current zone id
            // i.e. [{propertyId: {Number},value: {String}}, {...}] or empty
            var zonePropertiesValues = thingWrapper.getZonePropertiesValues(zoneID);

            // if there is not properties cached for the current zone
            // then it isn't necessary to perform any action
            if (!zonePropertiesValues || !zonePropertiesValues.length) {
                return {};
            }

            // mapping zone properties definition according to its id
            // this action is performed in order to be easier to match the zone properties values
            // with the other parameters that are needed as the type and the name of each property
            var zoneTypePropMapById = {};
            for (var i = 0, ii = zonePropertiesDef.length; i < ii; i++) {
                zoneTypePropMapById[zonePropertiesDef[i].id] = {
                    name: zonePropertiesDef[i].name,
                    type: zonePropertiesDef[i].type
                };
            }

            var propertyValuesMapByName = {},
                propertyId,
                propertyName,
                propertyValue,
                typeValue;

            for (var j = 0, jj = zonePropertiesValues.length; j < jj; j++) {
                propertyId = zonePropertiesValues[j].zonePropertyId;
                propertyValue = zonePropertiesValues[j].value;

                if (zoneTypePropMapById.hasOwnProperty(propertyId)) {
                    propertyName = zoneTypePropMapById[propertyId].name;
                    typeValue = zoneTypePropMapById[propertyId].type;

                    propertyValuesMapByName[propertyName] = propertyValue;
                }
            }

            return propertyValuesMapByName;
        }

        /**
         * GetZonePropertyValue - Gets an specific zone property
         * @param  {string} propertyName
         * @return {string} propertyValue
         */
        function getZonePropertyValue(propertyName){
            var udfValue = '';
            var zoneObj = thingWrapper.getUdfZone("zone");
            zoneTypeObj = zoneObj.getZoneType();

            if (zoneObj) {
                zoneID = zoneObj.getId();
                if(zoneID){
                    zoneProperties = mapZoneTypePropertiesValues(zoneID, zoneTypeObj);
                    if(zoneProperties[propertyName] !== undefined){
                        udfValue = zoneProperties[propertyName];
                    }
                }
            }else{
                udfValue = '';
            }
            return udfValue;
        }

        /**
         * Given a thing type code and serial #, this function will retrieve the thing object if it exists
         * this function takes in 2 parameters
         * theThingType - which holds teh thing tyoe code
         * theSerial - which holds the serial of a given thing of the thing type
         * function will return the thing object
         * @param  {string} thingTypeCode
         * @param  {string} serial
         * @return {object} theThing
         */
        function GetThingByThingTypeCode(thingTypeCode, serial) {

            var theThing = cacheManagerUtil.getThing(thingTypeCode, serial);
            printLog(" GetThingByThingTypeCode "+ thingTypeCode + " | " + serial,"debug");
            return theThing;
        }

        /**
         * Function to remove excessive zeros or fill missing zeros in a UPC chain
         * to reach 13 chars to support ViZix Retail
         * @param  {string} upcChain
         */
        function equilizeUPCto13Chars(upcChain){
            var upc13Digits = upcChain;

            if(upcChain.length < 13){

                for(var indx1 = upcChain.length; indx1 <13; indx1++){
                    upc13Digits = "0" + upc13Digits.toString();
                }
            }else{

                for(var indx2 = upcChain.length; indx2 > 13; indx2--){
                    upc13Digits = upc13Digits.substring(1, upc13Digits.length);
                }
            }
            return upc13Digits;
        }

        /**
         * Function to remove excessive zeros or fill missing zeros in a SKU chain
         * to reach 13 chars to support ViZix Retail
         * @param  {string} skuChain
         */
        function equalizeSKUto8Chars(skuChain){
            var sku8Digits = skuChain;

            if(skuChain.length <= 8){

                for(var indx1 = skuChain.length; indx1 < 8; indx1++){
                    sku8Digits = "0" + sku8Digits.toString();
                }
            }else{

                for(var indx2 = skuChain.length; indx2 > 8; indx2--){
                    sku8Digits = sku8Digits.substring(1, sku8Digits.length);
                }
            }
            return sku8Digits;
        }

        /**
         * Function to copy the Meta Data from Products to a ThingType
         * the ThingType must be declared on Vizix with the same standard UDFs
         * i.e. Item or SOH.
         * @return {boolean} If Thing Type had MetaData
         */
        function copyRetailMetaData(parameter){

            if(thingMessage.getUdf(parameter)) {
                var exp = thingMessage.getUdf(parameter).getValue();
                var upcThing = null;
                for (var indx = 0; indx <= 2; indx++) {
                    var tempUpcThing = cacheManagerUtil.getThing('Products', exp);
                    if (tempUpcThing) {
                        upcThing = tempUpcThing;
                        indx = 3;
                    } else {
                        exp = exp.substring(1, exp.length);
                    }
                }

                if (upcThing) {
                    appendUDF('P_BizGroupDesc', upcThing.getUdf("BizGroupDesc"));
                    appendUDF('P_BizGroupNum', upcThing.getUdf("BizGroupNum"));
                    appendUDF('P_Brand', upcThing.getUdf("Brand"));
                    appendUDF('P_Color', upcThing.getUdf("Color"));
                    appendUDF('P_Department', upcThing.getUdf("Department"));
                    appendUDF('P_DepartmentName', upcThing.getUdf("DepartmentName"));
                    appendUDF('P_Size', upcThing.getUdf("Size"));
                    appendUDF('P_SKU', upcThing.getUdf("SKU"));
                    appendUDF('P_SKUDescription', upcThing.getUdf("SKUDescription"));
                    appendUDF('P_UPC', upcThing.getUdf("UPCNumber"));
                    appendUDF('P_VendorStyle', upcThing.getUdf("VendorStyle"));

                    PropertySetter(UDFS);
                } else {
                    printLog(" UPC for Thing Type Products " + exp + " NOT FOUND!!", "debug");
                    return false;
                }
            }else{
                printLog(parameter + " NOT FOUND!!! ", "debug");
                return false;
            }
            return true;
        }

        /**
         * Sets the First Detect UDFs by source.
         * Make sure that the Thing Type has the following UDFs:
         * firstDetectTimePerDay_ALEBridge (Timestamp) - Set firstDetect if source=ALE Bridge
         * firstDetectTimePerDay_SFBridge (Timestamp) - Set firstDetect if source=STRFLEX Bridge
         * firstDetectTimePerDay_Mobile (Timestamp) - Set firstDetect if source=Mobile
         * @Param {string} source
         * **/
        function setFirstDetectTimeBySource(source) {

            //var messageTs = thingMessage.getTime();
            var messageTs= new Date().getTime();

            var bySource="";

            if(!tw.getUdf("FirstDetectDate")) {
                appendUDF("FirstDetectDate", messageTs);
            }

            /* RULE FIRST DETECTED */
            //appendUDF('FirstDetectDate', new Date().getTime());

            //Define the sources handled by this
            if (source.match(/^ALE.*$/)) {
                bySource = "ALEB";
            }
            if (source.match(/^SF.*$/)) {
                bySource = "STARB";
            }
            if (source.match(/^FLOW.*$/)) {
                bySource = "FLOW";
            }

            switch(bySource) {
                case "ALEB":
                    appendUDF('FirstDetectTime_ALE', messageTs);
                    break;
                case "STARB":
                    //appendUDF('firstDetectTimePerDay_SFBridge', messageTs);
                    break;
                case "FLOW":
                    appendUDF('FirstDetectTime_Flow', messageTs);
                    break;
                default:
            }

            //printLog(" setFirstDetectTimeBySource = "+ source,"debug");

        }

        /**
         * Sets the Last Detect UDFs by source.
         * Make sure that the Thing Type has the following UDFs:
         * lastDetectTime_ALEBridge (Timestamp) - Set lastDetect if source=ALE Bridge
         * lastDetectTime_SFBridge (Timestamp) - Set lastDetect if source=STRFLEX Bridge
         * lastDetectTime_Mobile (Timestamp) - Set lastDetect if source=Mobile
         * @Param {string} source
         * **/
        function setLastDetectTimeBySource(source) {

            var messageTs = thingMessage.getTime();
            var bySource="";

            //Define the sources handled by this JSRule
            if (source.match(/^ALE.*$/)) {
                bySource = "ALEB";
            }
            if (source.match(/^SF.*$/)) {
                bySource = "STARB";
            }
            if (source.match(/^Mobile.*$/)) {
                bySource = "VMOB";
            }

            switch(bySource) {
                case "ALEB":
                    appendUDF('lastDetectTime_ALEBridge', messageTs);
                    break;
                case "STARB":
                    appendUDF('lastDetectTime_SFBridge', messageTs);
                    break;
                case "VMOB":
                    appendUDF('lastDetectTime_Mobile', messageTs);
                    break;
                default:
            }

            printLog(" setLastDetectTimeBySource = "+ source,"debug");

        }

        /***
         * Increments +1 the Zone Change counter of a thing
         * Make sure that the Thing Type has the following UDF:
         * CounterZoneChange  (Number) - Default to 0: To collect the number of time a thing change the zone
         * */
        function incrementCounterZoneChange() {
            var ZONE_CHANGED = false;
            var zone = '';
            var zoneCache = '';

            var zoneObj = tw.getUdfZone("zone"); // get the Zone From Message First, if null then will search on the DB. and return and OBJ
            if (zoneObj !== null) {
                zone = zoneObj.getCode(); // Will get the zone Code from Zone OBJ
            }
            var zoneId = thing.getUdf("zone");  //Get the ZoneId from DB

            if (zoneId !== null && zoneId !== 0){
                var zoneCacheObj = tw.getCacheService().getZoneById(zoneId);

                if (zoneCacheObj !== null){
                    zoneCache = zoneCacheObj.getCode();
                }
            }
            else{
                zoneCache = '';
            }

            ZONE_CHANGED = (!!zone)&&(zone !== zoneCache);

            if(zone.toLowerCase() === 'unknown'){
                ZONE_CHANGED = false;
            }

            if(ZONE_CHANGED){
                var counterZoneChange = thing.getUdf("CounterZoneChange");

                if(isNaN(counterZoneChange)){
                    appendUDF('CounterZoneChange', parseInt(1));
                } else{
                    appendUDF('CounterZoneChange', parseInt(counterZoneChange) + 1);
                }
            }

        }

        /**
         * Increments +1 the JScounter of a thing
         * Make sure that the Thing Type has the following UDF:
         * CounterJS (Number) - Default to 0 : To collect the number of times a JS rule is evaluated for a thing
         * */
        function incrementCounterJS() {
            var counterJS = thing.getUdf("CounterJS");

            if(isNaN(counterJS)){
                appendUDF('CounterJS', parseInt(1));
            } else{
                appendUDF('CounterJS', parseInt(counterJS) + 1);
            }
        }

        /***
         * Increments +1 the Tag Blink counters of a thing
         * Make sure that the Thing Type has the following UDF:
         * CounterTagBlink (Number) - Default to 0: To collect the number of blinks received, the source may be ALE Bridge or STARflex Bridge
         * */
        function incrementCounterTagBlink(){

            if(source === "ALEB" || source === "SFBTRR"){
                var counterTagBlink = thing.getUdf("CounterTagBlink");

                if(isNaN(counterTagBlink)){
                    appendUDF('CounterTagBlink', parseInt(1));
                } else{
                    appendUDF('CounterTagBlink', parseInt(counterTagBlink) + 1);
                }

            }
        }

        /***
         * Increments +1 the counters of a thing
         * Make sure that the Thing Type has the following UDFs:
         * CounterJS (Number) - Default to 0 : To collect the number of times a JS rule is evaluated for a thing
         * CounterTagBlink (Number) - Default to 0: To collect the number of blinks received, the source may be ALE Bridge or STARflex Bridge
         * CounterZoneChange  (Number) - Default to 0: To collect the number of time a thing change the zone
         * */
        function incrementCounters(){
            /** JS Counter**/
            incrementCounterJS();

            /** Zone Change Counter **/
            incrementCounterZoneChange();

            /** Tag Blink Counter **/
            incrementCounterTagBlink();
        }

        /**
         * Returns the value of a UDF from ThingMessage
         * */
        function getPropertyInMessage(prop){
            if(!thingMessage.getUdf(prop)){
                return '';
            }
            return thingMessage.getUdf(prop).getValue();
        }

        /**
         * Returns the value of a UDF from ThingWrapper
         * **/
        function getPropertyInWrapper(prop){
            if(!tw.getUdf(prop)){
                return '';
            }
            return tw.getUdf(prop) || {};
        }

//
// END OF FUNCTION LIBRARY
// ********************************************************************************************************
// ********************************************************************************************************



    }
) ();
